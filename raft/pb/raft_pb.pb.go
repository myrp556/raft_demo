// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_pb.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	HeartbeatRequest      MessageType = 0
	HeartbeatResponse     MessageType = 1
	RequestVoteRequest    MessageType = 2
	RequestVoteResponse   MessageType = 3
	StartCampaign         MessageType = 4
	AppendEntriesRequest  MessageType = 5
	AppendEntriesResponse MessageType = 6
	SendHeartbeat         MessageType = 7
	ProposeMessage        MessageType = 8
)

var MessageType_name = map[int32]string{
	0: "HeartbeatRequest",
	1: "HeartbeatResponse",
	2: "RequestVoteRequest",
	3: "RequestVoteResponse",
	4: "StartCampaign",
	5: "AppendEntriesRequest",
	6: "AppendEntriesResponse",
	7: "SendHeartbeat",
	8: "ProposeMessage",
}

var MessageType_value = map[string]int32{
	"HeartbeatRequest":      0,
	"HeartbeatResponse":     1,
	"RequestVoteRequest":    2,
	"RequestVoteResponse":   3,
	"StartCampaign":         4,
	"AppendEntriesRequest":  5,
	"AppendEntriesResponse": 6,
	"SendHeartbeat":         7,
	"ProposeMessage":        8,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_145cd750ffecf3fa, []int{0}
}

type RejectType int32

const (
	RejectPastTerm    RejectType = 0
	RejectPastIndex   RejectType = 1
	RejectPastLogTerm RejectType = 2
	RejectHasLeader   RejectType = 3
	RejectAppend      RejectType = 4
	RejectVoted       RejectType = 5
	RejectUnknown     RejectType = 6
)

var RejectType_name = map[int32]string{
	0: "RejectPastTerm",
	1: "RejectPastIndex",
	2: "RejectPastLogTerm",
	3: "RejectHasLeader",
	4: "RejectAppend",
	5: "RejectVoted",
	6: "RejectUnknown",
}

var RejectType_value = map[string]int32{
	"RejectPastTerm":    0,
	"RejectPastIndex":   1,
	"RejectPastLogTerm": 2,
	"RejectHasLeader":   3,
	"RejectAppend":      4,
	"RejectVoted":       5,
	"RejectUnknown":     6,
}

func (x RejectType) Enum() *RejectType {
	p := new(RejectType)
	*p = x
	return p
}

func (x RejectType) String() string {
	return proto.EnumName(RejectType_name, int32(x))
}

func (x *RejectType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RejectType_value, data, "RejectType")
	if err != nil {
		return err
	}
	*x = RejectType(value)
	return nil
}

func (RejectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_145cd750ffecf3fa, []int{1}
}

type EntryType int32

const (
	NormalEntry  EntryType = 0
	UnknownEntry EntryType = 1
)

var EntryType_name = map[int32]string{
	0: "NormalEntry",
	1: "UnknownEntry",
}

var EntryType_value = map[string]int32{
	"NormalEntry":  0,
	"UnknownEntry": 1,
}

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

func (x *EntryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntryType_value, data, "EntryType")
	if err != nil {
		return err
	}
	*x = EntryType(value)
	return nil
}

func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_145cd750ffecf3fa, []int{2}
}

type Entry struct {
	Type                 EntryType `protobuf:"varint,1,opt,name=type,enum=pb.EntryType" json:"type"`
	Term                 uint64    `protobuf:"varint,2,opt,name=term" json:"term"`
	Index                uint64    `protobuf:"varint,3,opt,name=index" json:"index"`
	Data                 []byte    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_145cd750ffecf3fa, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

type Milestone struct {
	Term                 uint64   `protobuf:"varint,1,opt,name=term" json:"term"`
	Vote                 uint64   `protobuf:"varint,2,opt,name=vote" json:"vote"`
	Commit               uint64   `protobuf:"varint,3,opt,name=commit" json:"commit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Milestone) Reset()         { *m = Milestone{} }
func (m *Milestone) String() string { return proto.CompactTextString(m) }
func (*Milestone) ProtoMessage()    {}
func (*Milestone) Descriptor() ([]byte, []int) {
	return fileDescriptor_145cd750ffecf3fa, []int{1}
}
func (m *Milestone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Milestone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Milestone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Milestone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Milestone.Merge(m, src)
}
func (m *Milestone) XXX_Size() int {
	return m.Size()
}
func (m *Milestone) XXX_DiscardUnknown() {
	xxx_messageInfo_Milestone.DiscardUnknown(m)
}

var xxx_messageInfo_Milestone proto.InternalMessageInfo

type Message struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=type,enum=pb.MessageType" json:"type"`
	Term                 uint64      `protobuf:"varint,2,opt,name=term" json:"term"`
	Src                  uint64      `protobuf:"varint,3,opt,name=src" json:"src"`
	Dst                  uint64      `protobuf:"varint,4,opt,name=dst" json:"dst"`
	Reject               bool        `protobuf:"varint,5,opt,name=reject" json:"reject"`
	Index                uint64      `protobuf:"varint,6,opt,name=index" json:"index"`
	Commit               uint64      `protobuf:"varint,7,opt,name=commit" json:"commit"`
	LogTerm              uint64      `protobuf:"varint,8,opt,name=logTerm" json:"logTerm"`
	RejectType           RejectType  `protobuf:"varint,9,opt,name=rejectType,enum=pb.RejectType" json:"rejectType"`
	RejectHint           uint64      `protobuf:"varint,10,opt,name=rejectHint" json:"rejectHint"`
	Extra                []byte      `protobuf:"bytes,11,opt,name=extra" json:"extra,omitempty"`
	Entries              []Entry     `protobuf:"bytes,12,rep,name=entries" json:"entries"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_145cd750ffecf3fa, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("pb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("pb.RejectType", RejectType_name, RejectType_value)
	proto.RegisterEnum("pb.EntryType", EntryType_name, EntryType_value)
	proto.RegisterType((*Entry)(nil), "pb.Entry")
	proto.RegisterType((*Milestone)(nil), "pb.Milestone")
	proto.RegisterType((*Message)(nil), "pb.Message")
}

func init() { proto.RegisterFile("raft_pb.proto", fileDescriptor_145cd750ffecf3fa) }

var fileDescriptor_145cd750ffecf3fa = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x4e, 0x13, 0x41,
	0x14, 0xc6, 0x3b, 0xed, 0xb6, 0xa5, 0xa7, 0xfc, 0x19, 0x0e, 0x05, 0x57, 0x62, 0x6a, 0x43, 0x4c,
	0x2c, 0x24, 0x96, 0x84, 0xf8, 0x02, 0x62, 0x48, 0x30, 0x01, 0x43, 0x2a, 0x7a, 0x67, 0xcc, 0xb4,
	0x7b, 0xa8, 0xab, 0xec, 0xce, 0x3a, 0x33, 0x28, 0xf8, 0x1a, 0x5e, 0xf8, 0x4a, 0x5c, 0x72, 0xed,
	0x85, 0x11, 0x9e, 0xc4, 0xcc, 0xcc, 0xb6, 0xbb, 0x95, 0x2b, 0xef, 0x76, 0x7e, 0xdf, 0x39, 0x67,
	0xbe, 0x6f, 0x4e, 0x0b, 0x4b, 0x4a, 0x9c, 0x99, 0x0f, 0xd9, 0x68, 0x90, 0x29, 0x69, 0x24, 0x56,
	0xb3, 0xd1, 0xe6, 0xb3, 0x49, 0x6c, 0x3e, 0x5e, 0x8c, 0x06, 0x63, 0x99, 0xec, 0x4e, 0xe4, 0x44,
	0xee, 0x3a, 0x69, 0x74, 0x71, 0xe6, 0x4e, 0xee, 0xe0, 0xbe, 0x7c, 0xcb, 0xd6, 0x77, 0xa8, 0x1f,
	0xa4, 0x46, 0x5d, 0xe1, 0x53, 0x08, 0xcc, 0x55, 0x46, 0x21, 0xeb, 0xb1, 0xfe, 0xf2, 0xde, 0xd2,
	0x20, 0x1b, 0x0d, 0x9c, 0x70, 0x7a, 0x95, 0xd1, 0x7e, 0x70, 0xfd, 0xfb, 0x71, 0x65, 0xe8, 0x0a,
	0x30, 0x84, 0xc0, 0x90, 0x4a, 0xc2, 0x6a, 0x8f, 0xf5, 0x83, 0x99, 0x42, 0x2a, 0xc1, 0x4d, 0xa8,
	0xc7, 0x69, 0x44, 0x97, 0x61, 0xad, 0x24, 0x79, 0x84, 0x08, 0x41, 0x24, 0x8c, 0x08, 0x83, 0x1e,
	0xeb, 0x2f, 0x0e, 0xdd, 0xf7, 0xd6, 0x7b, 0x68, 0x1d, 0xc7, 0xe7, 0xa4, 0x8d, 0x4c, 0x8b, 0xb1,
	0xec, 0xde, 0xd8, 0x10, 0x82, 0xaf, 0xd2, 0xd0, 0xfc, 0x85, 0x96, 0xe0, 0x23, 0x68, 0x8c, 0x65,
	0x92, 0xc4, 0x66, 0xee, 0xc6, 0x9c, 0x6d, 0xfd, 0xa8, 0x41, 0xf3, 0x98, 0xb4, 0x16, 0x13, 0xc2,
	0xed, 0xb9, 0x74, 0x2b, 0x36, 0x5d, 0x2e, 0xfd, 0x47, 0xbe, 0x0d, 0xa8, 0x69, 0x35, 0x9e, 0xbb,
	0xcb, 0x02, 0xcb, 0x23, 0x6d, 0x5c, 0xb4, 0x19, 0x8f, 0xb4, 0xb1, 0xf6, 0x14, 0x7d, 0xa2, 0xb1,
	0x09, 0xeb, 0x3d, 0xd6, 0x5f, 0x98, 0xda, 0xf3, 0xac, 0x78, 0xad, 0xc6, 0xfd, 0xd7, 0x2a, 0x82,
	0x35, 0xef, 0x07, 0xc3, 0x2e, 0x34, 0xcf, 0xe5, 0xe4, 0xd4, 0x9a, 0x5c, 0x28, 0xc9, 0x53, 0x88,
	0xcf, 0x01, 0xfc, 0x1d, 0x36, 0x5b, 0xd8, 0x72, 0x91, 0x97, 0x6d, 0xe4, 0xe1, 0x8c, 0xe6, 0x2d,
	0xa5, 0x3a, 0x7c, 0x32, 0xed, 0x3a, 0x8c, 0x53, 0x13, 0x42, 0x69, 0x70, 0x89, 0x63, 0x07, 0xea,
	0x74, 0x69, 0x94, 0x08, 0xdb, 0x6e, 0x91, 0xfe, 0x80, 0xdb, 0xd0, 0xa4, 0xd4, 0xa8, 0x98, 0x74,
	0xb8, 0xd8, 0xab, 0xf5, 0xdb, 0x7b, 0xad, 0xd9, 0xef, 0x67, 0x6a, 0x2e, 0xd7, 0x77, 0x7e, 0x31,
	0x68, 0x97, 0x9e, 0x1e, 0x3b, 0xc0, 0x0f, 0x49, 0x28, 0x33, 0x22, 0x61, 0x86, 0xf4, 0xe5, 0x82,
	0xb4, 0xe1, 0x15, 0x5c, 0x87, 0xd5, 0x12, 0xd5, 0x99, 0x4c, 0x35, 0x71, 0x86, 0x1b, 0x80, 0x79,
	0xcd, 0x3b, 0x69, 0x68, 0x5a, 0x5e, 0xc5, 0x07, 0xb0, 0x36, 0xc7, 0xf3, 0x86, 0x1a, 0xae, 0xc2,
	0xd2, 0x1b, 0x23, 0x94, 0x79, 0x29, 0x92, 0x4c, 0xc4, 0x93, 0x94, 0x07, 0x18, 0x42, 0xe7, 0x45,
	0x96, 0x51, 0x1a, 0x1d, 0x78, 0x47, 0xd3, 0x29, 0x75, 0x7c, 0x08, 0xeb, 0xff, 0x28, 0xf9, 0x9c,
	0x86, 0x9b, 0x43, 0x69, 0x34, 0xf3, 0xc4, 0x9b, 0x88, 0xb0, 0x7c, 0xa2, 0x64, 0x26, 0x35, 0xe5,
	0x71, 0xf8, 0xc2, 0xce, 0x4f, 0x06, 0x50, 0x3c, 0xb2, 0x2d, 0xf1, 0xa7, 0x13, 0xa1, 0x8d, 0x5d,
	0x0d, 0xaf, 0xe0, 0x1a, 0xac, 0x14, 0xec, 0x95, 0xdd, 0x36, 0x67, 0x36, 0x6e, 0x01, 0x8f, 0xfc,
	0x1a, 0x79, 0xb5, 0xa8, 0x3d, 0x14, 0xfa, 0x88, 0x44, 0x44, 0x8a, 0xd7, 0x90, 0xc3, 0xa2, 0x87,
	0xde, 0x2b, 0x0f, 0x70, 0x05, 0xda, 0x9e, 0xd8, 0xf0, 0x11, 0xaf, 0x5b, 0xb7, 0x1e, 0xbc, 0x4d,
	0x3f, 0xa7, 0xf2, 0x5b, 0xca, 0x1b, 0x3b, 0x03, 0x68, 0xcd, 0xfe, 0xce, 0xb6, 0xe1, 0xb5, 0x54,
	0x89, 0x38, 0x77, 0x88, 0x57, 0xec, 0xcc, 0xbc, 0xd4, 0x13, 0xb6, 0xdf, 0xb9, 0xbe, 0xed, 0x56,
	0x6e, 0x6e, 0xbb, 0x95, 0xeb, 0xbb, 0x2e, 0xbb, 0xb9, 0xeb, 0xb2, 0x3f, 0x77, 0x5d, 0xf6, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x42, 0xc1, 0x8b, 0x70, 0x04, 0x00, 0x00,
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRaftPb(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x18
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x10
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Milestone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Milestone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Milestone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Commit))
	i--
	dAtA[i] = 0x18
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Vote))
	i--
	dAtA[i] = 0x10
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Extra != nil {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintRaftPb(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x5a
	}
	i = encodeVarintRaftPb(dAtA, i, uint64(m.RejectHint))
	i--
	dAtA[i] = 0x50
	i = encodeVarintRaftPb(dAtA, i, uint64(m.RejectType))
	i--
	dAtA[i] = 0x48
	i = encodeVarintRaftPb(dAtA, i, uint64(m.LogTerm))
	i--
	dAtA[i] = 0x40
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Commit))
	i--
	dAtA[i] = 0x38
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x30
	i--
	if m.Reject {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Dst))
	i--
	dAtA[i] = 0x20
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Src))
	i--
	dAtA[i] = 0x18
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x10
	i = encodeVarintRaftPb(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintRaftPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaftPb(uint64(m.Type))
	n += 1 + sovRaftPb(uint64(m.Term))
	n += 1 + sovRaftPb(uint64(m.Index))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovRaftPb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Milestone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaftPb(uint64(m.Term))
	n += 1 + sovRaftPb(uint64(m.Vote))
	n += 1 + sovRaftPb(uint64(m.Commit))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaftPb(uint64(m.Type))
	n += 1 + sovRaftPb(uint64(m.Term))
	n += 1 + sovRaftPb(uint64(m.Src))
	n += 1 + sovRaftPb(uint64(m.Dst))
	n += 2
	n += 1 + sovRaftPb(uint64(m.Index))
	n += 1 + sovRaftPb(uint64(m.Commit))
	n += 1 + sovRaftPb(uint64(m.LogTerm))
	n += 1 + sovRaftPb(uint64(m.RejectType))
	n += 1 + sovRaftPb(uint64(m.RejectHint))
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovRaftPb(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRaftPb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftPb(x uint64) (n int) {
	return sovRaftPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Milestone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Milestone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Milestone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			m.Dst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dst |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reject = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogTerm", wireType)
			}
			m.LogTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogTerm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectType", wireType)
			}
			m.RejectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectType |= RejectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectHint", wireType)
			}
			m.RejectHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectHint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftPb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftPb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftPb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftPb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftPb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftPb = fmt.Errorf("proto: unexpected end of group")
)
